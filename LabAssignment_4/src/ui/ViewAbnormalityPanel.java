/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;

/**
 *
 * @author ronak
 */
public class ViewAbnormalityPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewAbnormalityPanel
     */
    
    PatientDirectory pList;
    City city;
    public ViewAbnormalityPanel(PatientDirectory pList, City city) {
        initComponents();
         this.pList = pList;
        this.city=city;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblViewAbnormality = new javax.swing.JTable();
        lblDisplay = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 102, 255));
        jLabel1.setText("View Abnormality");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 102, 255));
        jLabel2.setText("Community:");

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setText("Blood Pressure");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 204, 255));
        jButton2.setText("Heart Rate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 204, 255));
        jButton3.setText("Respiration Rate");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 204, 255));
        jButton4.setText("Temperature");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        tblViewAbnormality.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Patient Name", "Blood Pressure", "Respiration Rate", "Heart Rate", "Weight", "Temprature"
            }
        ));
        jScrollPane1.setViewportView(tblViewAbnormality);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblDisplay)
                        .addGap(299, 299, 299))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel2)
                                .addGap(78, 78, 78)
                                .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(64, 64, 64))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(321, 321, 321))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDisplay)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(93, 93, 93)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

       private void addObjectToRow(Patient p)
    {
          DefaultTableModel model = (DefaultTableModel)tblViewAbnormality.getModel();
      model.setRowCount(0);
      
         Object[] object={
                    
            p.getName(),
            p.getPatientID(),
            
};
                 model.addRow(object); 
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        //BP
         DefaultTableModel model = (DefaultTableModel)tblViewAbnormality.getModel();
      model.setRowCount(0);
        Integer count=0;
       String community = txtCommunity.getText();
       
      for(int i=0; i<pList.getPatientList().size(); i++) //Check if comunity exists
      {
           Community c1=city.getCommunity(community);
       
      if(c1.getCommunityName()!=null)
      {
          if(pList.getPatientList().get(i).getCommunity().getCommunityName().equalsIgnoreCase(community)){
           
          
            Patient patient=pList.getPatientList().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            Encounter lastEncounter = null;
            for(Encounter r: eh.getEncounterHistory())
            {
                System.out.println("out vitalabnoraml");
                patient.setIsBPAbnormal(r.isVitalSignAbNormalBP(r,patient.getAge()));
                lastEncounter = r;
            }
            if(patient.getIsBPAbnormal()){
           
      
         Object[] object={
             
            patient.getPatientID(),
            patient.getName(),
            lastEncounter.getVitalSigns().getBloodPressure(),
            lastEncounter.getVitalSigns().getRespiratoryRate(),
            lastEncounter.getVitalSigns().getHR(),
            lastEncounter.getVitalSigns().getWeight(),
            lastEncounter.getVitalSigns().getTemperature(),
            
};
                 model.addRow(object); 
            count+=1;
            }
            lblDisplay.setText("Number of People with abnormalities in "+community+ " are "+count+"");}
          
      }
      else
      {
           
            System.out.println("Community dont exist");
            
      }
            }
            
  
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        //Respiratory rate
        
         DefaultTableModel model = (DefaultTableModel)tblViewAbnormality.getModel();
      model.setRowCount(0);
      
       String community = txtCommunity.getText();
       Integer count=0;
      for(int i=0; i<pList.getPatientList().size(); i++)
      {
          Community c1=city.getCommunity(community);
       
      if(c1.getCommunityName()!=null)
      {
           if(pList.getPatientList().get(i).getCommunity().getCommunityName().equalsIgnoreCase(community)){
         
            Patient patient=pList.getPatientList().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            Encounter lastEncounter = null;
            for(Encounter r: eh.getEncounterHistory()){
                System.out.println("out vitalabnoraml");
                  patient.setIsRespirationAbnormal(r.isVitalSignAbNormalRespiration(r, patient.getAge()));
                  lastEncounter = r;
            }
            if(patient.getIsRespirationAbnormal()){
           
      
         Object[] object={
             
            patient.getPatientID(),
            patient.getName(),
            lastEncounter.getVitalSigns().getBloodPressure(),
            lastEncounter.getVitalSigns().getRespiratoryRate(),
            lastEncounter.getVitalSigns().getHR(),
            lastEncounter.getVitalSigns().getWeight(),
            lastEncounter.getVitalSigns().getTemperature(),
            
            
            
};
                 model.addRow(object); 
             count+=1;
            }
            lblDisplay.setText("Number of People with abnormalities in "+community+ " are "+count+"");}
          
      }
      else
      {
           
            System.out.println("Community dont exist");
            
      }
            }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        //Heart Rate
        
            DefaultTableModel model = (DefaultTableModel)tblViewAbnormality.getModel();
      model.setRowCount(0);
      
       String community = txtCommunity.getText();
       Integer count=0;
      for(int i=0; i<pList.getPatientList().size(); i++)
      {
          Community c1=city.getCommunity(community);
       
      if(c1.getCommunityName()!=null)
      {
           if(pList.getPatientList().get(i).getCommunity().getCommunityName().equalsIgnoreCase(community)){
         
            Patient patient=pList.getPatientList().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            Encounter lastEncounter = null;
            for(Encounter r: eh.getEncounterHistory()){
                System.out.println("out vitalabnoraml");
                  patient.setIsPulseAbnormal(r.isVitalSignAbNormalHR(r, patient.getAge()));
                  lastEncounter = r;
            }
            if(patient.getIsPulseAbnormal()){
           
         Object[] object={
                    
            patient.getPatientID(),
            patient.getName(),
            lastEncounter.getVitalSigns().getBloodPressure(),
            lastEncounter.getVitalSigns().getRespiratoryRate(),
            lastEncounter.getVitalSigns().getHR(),
            lastEncounter.getVitalSigns().getWeight(),
            lastEncounter.getVitalSigns().getTemperature(), 
            
};
                 model.addRow(object); 
            count+=1;
            }
            lblDisplay.setText("Number of People with abnormalities in "+community+ " are "+count+"");}
          
      }
      else
      {
           
            System.out.println("Community dont exist");
            
      }
            }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        //temp
        
          DefaultTableModel model = (DefaultTableModel)tblViewAbnormality.getModel();
      model.setRowCount(0);
      
       String community = txtCommunity.getText();
         Integer count=0;
      for(int i=0; i<pList.getPatientList().size(); i++)
      {
      Community c1=city.getCommunity(community);
       
      if(c1.getCommunityName()!=null)
      {
            if(pList.getPatientList().get(i).getCommunity().getCommunityName().equalsIgnoreCase(community)){
         
            Patient patient=pList.getPatientList().get(i);
            EncounterHistory eh=new EncounterHistory();
            eh=patient.getEncounterHistory();
            //TODO: AND patient belongs to given community
            Encounter lastEncounter = null;
            for(Encounter r: eh.getEncounterHistory()){
                System.out.println("out vitalabnoraml");
                  patient.setIsBTAbnormal(r.isVitalSignAbNormalBT(r, patient.getAge()));
                  lastEncounter = r;
            }
            if(patient.getIsBTAbnormal()){
           
      
         Object[] object={
                    
            patient.getPatientID(),
            patient.getName(),
            lastEncounter.getVitalSigns().getBloodPressure(),
            lastEncounter.getVitalSigns().getRespiratoryRate(),
            lastEncounter.getVitalSigns().getHR(),
            lastEncounter.getVitalSigns().getWeight(),
            lastEncounter.getVitalSigns().getTemperature(),

            
};
                 model.addRow(object); 
             count+=1;
            }
            lblDisplay.setText("Number of People with abnormalities in "+community+ " are "+count+"");}
          
      }
      else
      {
           
            System.out.println("Community dont exist");
            
      }    
          
            }
            
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDisplay;
    private javax.swing.JTable tblViewAbnormality;
    private javax.swing.JTextField txtCommunity;
    // End of variables declaration//GEN-END:variables
}
